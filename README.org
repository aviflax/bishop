Bishop is a [[http://wiki.basho.com/Webmachine.html][Webmachine]]-like library for Clojure. The primary goal of
this project is to make it much easier to construct a clean, [[http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol][HTTP 1.1]]
compliant web-based API. With this ground-work laid, it will be much
easier for the developer to construct [[http://en.wikipedia.org/wiki/REST][REST-ful]] or even [[http://en.wikipedia.org/wiki/HATEOAS][HATEOAS]]
compliant services.

When you create a “resource” with Bishop, you get a function that
expects a [[https://github.com/mmcgrana/ring][Ring]] request map and will return a response map. This
library was designed to be used with Ring and should work with any
Ring middle-ware. Bishop provides its own routing mechanism but you
should be able to use another router if you like (for instance [[https://github.com/weavejester/clout][Clout]]).

* Warning: Early Days

  This is only our first release of this library and there may be
  issues. We do have [[https://github.com/tnr-global/bishop-sample][a sample application]] that we put together, I’m
  also working on implementing an application for production use that
  leverages this library. Be warned, here there may be bugs!

* Aren't There Other Projects that Do This?

  Yes, there are several other projects that are looking to do this
  very same thing. The ones that I am aware of are...

  + [[https://github.com/banjiewen/Clothesline][Clothesline]]
  + [[https://github.com/malcolmsparks/plugboard][Plugboard]]

  This project has slightly different goals from those mentioned
  above. For one, this project isn't particularly interested in
  exposing a nice interface to Java code. Our primary concern is to
  make things easier for the Clojure developer.

  Plugboard is constructed on top of the excellent [[https://github.com/weavejester/compojure][Compojure]] library
  which in turn builds on [[https://github.com/mmcgrana/ring][Ring]], this project builds on top of Ring
  directly. The web APIs that I have constructed so far have been
  coded on Ring and I don't want to pull Compojure into the mix.

* Installation

 To use Bishop, add the following to your project’s “:dependencies”:

  #+BEGIN_SRC clojure
  [tnrglobal/bishop "1.0"]
  #+END_SRC

* How Does it Work?

  Anyway, let's say you have a function that will say "Hello" to
  people. First reference Bishop and likely Jetty and Ring.

  #+BEGIN_SRC clojure
  (ns hello.core
    (:require [com.tnrglobal.bishop.core :as bishop]
              [ring.adapter.jetty]
              [ring.middleware.params]))

  (defn hello
    [name]
    (str "Hello " name "!"))
  #+END_SRC

  We can then define a resource that says "Hello" in HTML or JSON.

  #+BEGIN_SRC clojure
  (def hello-resource
    (bishop/resource
      {"text/html" (fn [request]
                      (hiccup/html
                        [:p (hello (:name (:path-info request)))]))}

      {"text/json" (fn [request]
                      (clj-json/generate-string
                        {:message (hello (:name (:path-info request)))}))}))
  #+END_SRC

  This resource can return either HTML or JSON content, depending on
  the headers of the request. It expects to have a value in the
  "path-info" map under the ":name" key. This comes from the routing.

  #+BEGIN_SRC clojure
  (def routes
    {["hello" :name] hello-resource
     ["*"] (bishop/halt-resource 404)})
  #+END_SRC

  We route incoming request for "/hello/something" to our
  "hello-resource" functions, anything else will result in sending a
  "404" code to the client. Bishop will parse the route and the
  request's URI to populate the "path-info" map for your application,
  the goal is to do it in the same way that [[http://wiki.basho.com/Webmachine-Dispatching.html][Webmachine handles
  dispatch]].

  Lastly, you can add this as your Ring handler function.

  #+BEGIN_SRC clojure
  (def app
    (-> (bishop/handler routes)
        (wrap-params)))
  #+END_SRC

  Aside from parsing the URI and matching it to the route, Bishop is
  doing a lot of other work as well. It will cover all of the behavior
  in this [[http://wiki.basho.com/Webmachine-Diagram.html][HTTP 1.1 flow chart]]. In this instance, Bishop is...

  + Parsing the client URI and route, then populating the "path-info"
    map
  + Verifying that the client is trying to either GET or HEAD the
    resource.
  + Making sure that the length of the URI isn't totally nutty.
  + Verifying that our resource can accept either a GET or a HEAD
    request.
  + Checking to see if there are authorization headers if our resource
    requires them (which it does not).
  + Selecting the appropriate content type to provide to the client
    and sending the appropriate error if the client asks for a
    resource that we do not provide.

  And so on.

* Sample Application

  I have put a small, [[https://github.com/tnr-global/bishop-sample][simple application]] together to make
  sure that the library builds and mostly functions. If you’re
  interested, you are welcome to take a look at it.

  #+BEGIN_EXAMPLE
  https://github.com/tnr-global/bishop-sample
  #+END_EXAMPLE
